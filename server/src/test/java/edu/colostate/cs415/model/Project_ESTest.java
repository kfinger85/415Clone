/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 28 02:30:26 GMT 2023
 */

package edu.colostate.cs415.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.colostate.cs415.dto.ProjectDTO;
import edu.colostate.cs415.model.Project;
import edu.colostate.cs415.model.ProjectSize;
import edu.colostate.cs415.model.ProjectStatus;
import edu.colostate.cs415.model.Qualification;
import edu.colostate.cs415.model.Worker;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Project_ESTest extends Project_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Qualification qualification0 = new Qualification("edu.colostate.cs415.model.Project");
      linkedHashSet0.add(qualification0);
      Project project0 = new Project("edu.colostate.cs415.model.Project", linkedHashSet0, projectSize0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Project", linkedHashSet0, 0.0);
      project0.addWorker(worker0);
      Set<Worker> set0 = project0.getWorkers();
      assertTrue(set0.contains(worker0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("5$2G1U$crON1(`c?");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project("5$2G1U$crON1(`c?", linkedHashSet0, projectSize0);
      LinkedList<Worker> linkedList0 = new LinkedList<Worker>();
      linkedHashSet0.retainAll(linkedList0);
      Set<Qualification> set0 = project0.getRequiredQualifications();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.BIG;
      linkedHashSet0.add((Qualification) null);
      Project project0 = new Project("5XGx<L$q,`$'/{*q:W'", linkedHashSet0, projectSize0);
      // Undeclared exception!
      try { 
        project0.toDTO();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Qualification qualification0 = new Qualification("edu.colostate.cs415.model.Project");
      linkedHashSet0.add(qualification0);
      Project project0 = new Project("edu.colostate.cs415.model.Project", linkedHashSet0, projectSize0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Project", linkedHashSet0, 0.0);
      project0.addWorker(worker0);
      Set<Qualification> set0 = project0.getMissingQualifications();
      assertFalse(set0.contains(qualification0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Qualification qualification0 = new Qualification("gLMZO2/");
      linkedHashSet0.add(qualification0);
      Project project0 = new Project("Null Qualification", linkedHashSet0, projectSize0);
      Set<Qualification> set0 = project0.getMissingQualifications();
      assertTrue(set0.contains(qualification0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Qualification qualification0 = new Qualification("edu.colostate.cs415.model.Project");
      linkedHashSet0.add(qualification0);
      Project project0 = new Project("edu.colostate.cs415.model.Project", linkedHashSet0, projectSize0);
      ProjectSize projectSize1 = project0.getSize();
      assertEquals(ProjectSize.SMALL, projectSize1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Qualification qualification0 = new Qualification("gLMZO2/");
      linkedHashSet0.add(qualification0);
      Project project0 = new Project("Null Qualification", linkedHashSet0, projectSize0);
      project0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("Name field must not be null or empty");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project("Name field must not be null or empty", linkedHashSet0, projectSize0);
      boolean boolean0 = project0.isHelpful((Worker) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("5$2G1U$crON1(`c?");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("5$2G1U$crON1(`c?", linkedHashSet0, projectSize0);
      Worker worker0 = new Worker("5$2G1U$crON1(`c?", linkedHashSet0, 0.0);
      boolean boolean0 = project0.isHelpful(worker0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("5$2G1U$crON1(`c?");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("5$2G1U$crON1(`c?", linkedHashSet0, projectSize0);
      ProjectStatus projectStatus0 = ProjectStatus.ACTIVE;
      project0.setStatus(projectStatus0);
      Worker worker0 = new Worker("5$2G1U$crON1(`c?", linkedHashSet0, 0.0);
      project0.addWorker(worker0);
      project0.addQualification(qualification0);
      assertEquals(ProjectStatus.ACTIVE, project0.getStatus());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("'", linkedHashSet0, projectSize0);
      // Undeclared exception!
      try { 
        project0.addQualification((Qualification) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Qualification
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Qualification qualification0 = new Qualification("edu.colostate.cs415.model.Project");
      linkedHashSet0.add(qualification0);
      Project project0 = new Project("edu.colostate.cs415.model.Project", linkedHashSet0, projectSize0);
      project0.addQualification(qualification0);
      assertEquals(ProjectStatus.PLANNED, project0.getStatus());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("edu.colostate.cs415.model_Projec'", linkedHashSet0, projectSize0);
      // Undeclared exception!
      try { 
        project0.removeWorker((Worker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // worker must not be null
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Qualification qualification0 = new Qualification("edu.colostate.cs415.model.Project");
      linkedHashSet0.add(qualification0);
      Project project0 = new Project("edu.colostate.cs415.model.Project", linkedHashSet0, projectSize0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Project", linkedHashSet0, 0.0);
      project0.removeWorker(worker0);
      assertEquals(ProjectStatus.PLANNED, project0.getStatus());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("$VALUES");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("$VALUES", linkedHashSet0, projectSize0);
      // Undeclared exception!
      try { 
        project0.addWorker((Worker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // worker must not be null
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("5$2G1U$crON1(`c?");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("5$2G1U$crON1(`c?", linkedHashSet0, projectSize0);
      Worker worker0 = new Worker("5$2G1U$crON1(`c?", linkedHashSet0, 0.0);
      project0.addWorker(worker0);
      boolean boolean0 = project0.isHelpful(worker0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("5$2G1U$crON1(`c?");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project("5$2G1U$crON1(`c?", linkedHashSet0, projectSize0);
      // Undeclared exception!
      try { 
        project0.setStatus((ProjectStatus) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Status must not be null
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("5$2G1U$crON1(`c?");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("5$2G1U$crON1(`c?", linkedHashSet0, projectSize0);
      ProjectStatus projectStatus0 = ProjectStatus.ACTIVE;
      project0.setStatus(projectStatus0);
      project0.addQualification(qualification0);
      assertEquals(ProjectStatus.SUSPENDED, project0.getStatus());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("T<~G!e}#q.y|;O");
      boolean boolean0 = linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("T<~G!e}#q.y|;O", linkedHashSet0, projectSize0);
      boolean boolean1 = project0.equals(project0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("'", linkedHashSet0, projectSize0);
      boolean boolean0 = project0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("5$2G1U$crON1(`c?");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("5$2G1U$crON1(`c?", linkedHashSet0, projectSize0);
      boolean boolean0 = project0.equals("5$2G1U$crON1(`c?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = null;
      try {
        project0 = new Project("", linkedHashSet0, projectSize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name field must not be null or empty
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.BIG;
      Qualification qualification0 = new Qualification("Name field must not be null or empty");
      linkedHashSet0.add(qualification0);
      Project project0 = null;
      try {
        project0 = new Project((String) null, linkedHashSet0, projectSize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name field must not be null or empty
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      Project project0 = null;
      try {
        project0 = new Project("b7?)Lpu`l%", linkedHashSet0, (ProjectSize) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Project must have a size
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = null;
      try {
        project0 = new Project("", (Set<Qualification>) null, projectSize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Project must have at least one qualification
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("5$2G1U$crON1(`c?");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("5$2G1U$crON1(`c?", linkedHashSet0, projectSize0);
      ProjectDTO projectDTO0 = project0.toDTO();
      assertEquals("5$2G1U$crON1(`c?", projectDTO0.getName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("'", linkedHashSet0, projectSize0);
      Set<Worker> set0 = project0.getWorkers();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("5$2G1U$crON1(`c?");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("5$2G1U$crON1(`c?", linkedHashSet0, projectSize0);
      Set<Qualification> set0 = project0.getRequiredQualifications();
      assertTrue(set0.contains(qualification0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("5$2G1U$crON1(`c?");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("5$2G1U$crON1(`c?", linkedHashSet0, projectSize0);
      ProjectStatus projectStatus0 = project0.getStatus();
      assertEquals(ProjectStatus.PLANNED, projectStatus0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("5$2G1U$crON1(`c?");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("5$2G1U$crON1(`c?", linkedHashSet0, projectSize0);
      String string0 = project0.getName();
      assertEquals("5$2G1U$crON1(`c?", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Qualification qualification0 = new Qualification("`nj");
      linkedHashSet0.add(qualification0);
      Project project0 = new Project("`nj", linkedHashSet0, projectSize0);
      String string0 = project0.toString();
      assertEquals("`nj:0:PLANNED", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("VL+Dp&gleR/Bcd");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project("VL+Dp&gleR/Bcd", linkedHashSet0, projectSize0);
      project0.removeAllWorkers();
      assertEquals("VL+Dp&gleR/Bcd", project0.getName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = null;
      try {
        project0 = new Project((String) null, linkedHashSet0, projectSize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Project must have at least one qualification
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }
}
