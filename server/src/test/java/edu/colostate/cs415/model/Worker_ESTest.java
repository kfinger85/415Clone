/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 28 02:29:16 GMT 2023
 */

package edu.colostate.cs415.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.colostate.cs415.dto.WorkerDTO;
import edu.colostate.cs415.model.Project;
import edu.colostate.cs415.model.ProjectSize;
import edu.colostate.cs415.model.ProjectStatus;
import edu.colostate.cs415.model.Qualification;
import edu.colostate.cs415.model.Worker;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Worker_ESTest extends Worker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("Worker must have at least one qualification");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("Worker must have at least one qualification", linkedHashSet0, 1.0);
      worker0.setSalary(1883.0);
      assertEquals(1883.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("Null Qualification");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("G*H85", linkedHashSet0, 113.5008059883);
      WorkerDTO workerDTO0 = worker0.toDTO();
      assertEquals(113.5008059883, workerDTO0.getSalary(), 0.01);
      assertEquals(0, workerDTO0.getWorkload());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("XlSlO9");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("XlSlO9", linkedHashSet0, 0.0);
      double double0 = worker0.getSalary();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("G-o");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("G-o", linkedHashSet0, 2473.90050593);
      linkedHashSet0.clear();
      worker0.getQualifications();
      assertEquals(2473.90050593, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Qualification qualification0 = new Qualification("B)A<");
      linkedHashSet0.add(qualification0);
      Project project0 = new Project("B)A<", linkedHashSet0, projectSize0);
      Worker worker0 = new Worker("B)A<", linkedHashSet0, 0.0);
      worker0.addProject(project0);
      worker0.getProjects();
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("B)A<");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("B)A<", linkedHashSet0, 0.0);
      // Undeclared exception!
      try { 
        worker0.willOverload((Project) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      Worker worker0 = new Worker("}?", linkedHashSet0, 1982.34795);
      // Undeclared exception!
      try { 
        worker0.toDTO();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("l");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("l", linkedHashSet0, 0.0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("l", linkedHashSet0, projectSize0);
      ProjectStatus projectStatus0 = ProjectStatus.FINISHED;
      project0.setStatus(projectStatus0);
      worker0.addProject(project0);
      int int0 = worker0.getWorkload();
      assertEquals(0.0, worker0.getSalary(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Qualification qualification0 = new Qualification("B)A<");
      linkedHashSet0.add(qualification0);
      Project project0 = new Project("B)A<", linkedHashSet0, projectSize0);
      Worker worker0 = new Worker("B)A<", linkedHashSet0, 0.0);
      worker0.addProject(project0);
      int int0 = worker0.getWorkload();
      assertEquals(0.0, worker0.getSalary(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("Null Qualification");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("G*H85", linkedHashSet0, 113.5008059883);
      worker0.getName();
      assertEquals(113.5008059883, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("edu.colostate.cs415.model.Worker");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("&a=4vi't,VPm", linkedHashSet0, 0.0);
      worker0.hashCode();
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("edu.colostate.cs415.model.Worker");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("&a=4vi't,VPm", linkedHashSet0, 0.0);
      worker0.getQualifications();
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("edu.colostate.cs415.model.Worker");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("&a=4vi't,VPm", linkedHashSet0, 0.0);
      boolean boolean0 = worker0.isAvailable();
      assertTrue(boolean0);
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("l");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("l", linkedHashSet0, 0.0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("l", linkedHashSet0, projectSize0);
      worker0.addProject(project0);
      boolean boolean0 = worker0.willOverload(project0);
      assertEquals(0.0, worker0.getSalary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("l");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("l", linkedHashSet0, 0.0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("l", linkedHashSet0, projectSize0);
      ProjectStatus projectStatus0 = ProjectStatus.FINISHED;
      project0.setStatus(projectStatus0);
      worker0.addProject(project0);
      WorkerDTO workerDTO0 = worker0.toDTO();
      assertEquals(0, workerDTO0.getWorkload());
      assertEquals(0.0, workerDTO0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("l");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("l", linkedHashSet0, 0.0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("l", linkedHashSet0, projectSize0);
      boolean boolean0 = worker0.willOverload(project0);
      assertEquals(0.0, worker0.getSalary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("edu.colostate.cs415.model.ProjectSize");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.ProjectSize", linkedHashSet0, 1185.6224328805974);
      // Undeclared exception!
      try { 
        worker0.removeProject((Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // project must not be null
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("l");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("l", linkedHashSet0, 0.0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("l", linkedHashSet0, projectSize0);
      worker0.removeProject(project0);
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("edu.colostate.cs415.model.ProjectSize");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.ProjectSize", linkedHashSet0, 1163.898);
      // Undeclared exception!
      try { 
        worker0.addProject((Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // project must not be null
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("l");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("l", linkedHashSet0, 0.0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("l", linkedHashSet0, projectSize0);
      worker0.addProject(project0);
      WorkerDTO workerDTO0 = worker0.toDTO();
      assertEquals(0.0, workerDTO0.getSalary(), 0.01);
      assertEquals(3, workerDTO0.getWorkload());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("Din{teZ]Q^");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("1'y6\"9a?Yf2!CLuz", linkedHashSet0, 4786.0);
      // Undeclared exception!
      try { 
        worker0.addQualification((Qualification) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // qualification must not be null
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("uEpeQ|%KI':IBE(jD");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("uEpeQ|%KI':IBE(jD", linkedHashSet0, 1836.78331);
      worker0.addQualification(qualification0);
      assertEquals(1836.78331, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("edu.colostate.cs415.model.ProjectSize");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.ProjectSize", linkedHashSet0, 1163.898);
      // Undeclared exception!
      try { 
        worker0.setSalary((-6408.896012));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Salary cannot be negative
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("l");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("l", linkedHashSet0, 0.0);
      worker0.setSalary(0.0);
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("uEpeQ|%KI':IBE(jD");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("uEpeQ|%KI':IBE(jD", linkedHashSet0, 1836.78331);
      Object object0 = new Object();
      boolean boolean0 = worker0.equals(object0);
      assertEquals(1836.78331, worker0.getSalary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("l");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("l", linkedHashSet0, 0.0);
      boolean boolean0 = worker0.equals((Object) null);
      assertEquals(0.0, worker0.getSalary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("]Ex4[yg*lFkg3");
      linkedHashSet0.add(qualification0);
      Worker worker0 = null;
      try {
        worker0 = new Worker("", linkedHashSet0, 113.5008059883);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name field must not be null or empty
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("qualification must not be null");
      linkedHashSet0.add(qualification0);
      Worker worker0 = null;
      try {
        worker0 = new Worker((String) null, linkedHashSet0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name field must not be null or empty
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Worker worker0 = null;
      try {
        worker0 = new Worker("Worer mus2 have at last one qualification", linkedHashSet0, 2945.14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Worker must have at least one qualification
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Worker worker0 = null;
      try {
        worker0 = new Worker((String) null, (Set<Qualification>) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Worker must have at least one qualification
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Worker worker0 = null;
      try {
        worker0 = new Worker("o'a:KhTdA(Z)7Dg19b[", linkedHashSet0, (-757.563443505012));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Salary cannot be negative
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("B)A<");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("B)A<", linkedHashSet0, 0.0);
      worker0.getProjects();
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("uEpeQ|%KI':IBE(jD");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("uEpeQ|%KI':IBE(jD", linkedHashSet0, 1836.78331);
      boolean boolean0 = worker0.equals(worker0);
      assertTrue(boolean0);
      assertEquals(1836.78331, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("B)A<");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("B)A<", linkedHashSet0, 0.0);
      String string0 = worker0.toString();
      assertEquals(0.0, worker0.getSalary(), 0.01);
      assertEquals("B)A<:0:1:0", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("uEpeQ|%KI':IBE(jD");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("uEpeQ|%KI':IBE(jD", linkedHashSet0, 1836.78331);
      double double0 = worker0.getSalary();
      assertEquals(1836.78331, double0, 0.01);
  }
}
