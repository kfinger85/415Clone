/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 28 02:32:50 GMT 2023
 */

package edu.colostate.cs415.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.colostate.cs415.model.Company;
import edu.colostate.cs415.model.Project;
import edu.colostate.cs415.model.ProjectSize;
import edu.colostate.cs415.model.ProjectStatus;
import edu.colostate.cs415.model.Qualification;
import edu.colostate.cs415.model.Worker;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Company_ESTest extends Company_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Company company0 = new Company("s");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("s");
      linkedHashSet0.add(qualification0);
      company0.createQualification("s");
      Worker worker0 = company0.createWorker("s", linkedHashSet0, 1.0);
      assertEquals(12, Worker.MAX_WORKLOAD);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Company company0 = new Company("s");
      Company company1 = new Company("NX,?F~R=;cDB8] ");
      boolean boolean0 = company0.equals(company1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Company company0 = new Company("8!7k+;+oS_");
      Worker worker0 = company0.createWorker("|", (Set<Qualification>) null, 0.0);
      assertNull(worker0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Company company0 = new Company("Worker is not in company");
      Qualification qualification0 = company0.createQualification((String) null);
      assertNull(qualification0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Company company0 = new Company("k");
      company0.createQualification("k:0:0");
      Set<Qualification> set0 = company0.getQualifications();
      company0.createWorker(">^u7:", set0, 0.0);
      Set<Worker> set1 = company0.getUnassignedWorkers();
      assertFalse(set1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Company company0 = new Company("ePu.colostate.cs415.mvdel.Company");
      company0.createQualification("ePu.colostate.cs415.mvdel.Company");
      Set<Qualification> set0 = company0.getQualifications();
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      company0.createProject("f|d>gn 4]<^TS!k&7", set0, projectSize0);
      Set<Project> set1 = company0.getProjects();
      assertFalse(set1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Company company0 = new Company("s");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = company0.createQualification("', size='");
      linkedHashSet0.add(qualification0);
      company0.createWorker("', size='", linkedHashSet0, 1.0);
      Set<Worker> set0 = company0.getEmployedWorkers();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Company company0 = new Company("k");
      company0.createQualification("k:0:0");
      Set<Qualification> set0 = company0.getQualifications();
      Worker worker0 = company0.createWorker(">^u7:", set0, 0.0);
      Set<Worker> set1 = company0.getAvailableWorkers();
      assertTrue(set1.contains(worker0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Company company0 = new Company("s");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = company0.createQualification("s");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("s", linkedHashSet0, 1.0);
      company0.createWorker("s", linkedHashSet0, 1.0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("s", linkedHashSet0, projectSize0);
      company0.createProject("s", linkedHashSet0, projectSize0);
      company0.assign(worker0, project0);
      Set<Worker> set0 = company0.getAssignedWorkers();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Company company0 = new Company("b/4k*i)");
      // Undeclared exception!
      try { 
        company0.start((Project) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Company company0 = new Company("1z~*WNozD7?CN^B");
      // Undeclared exception!
      try { 
        company0.finish((Project) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Company company0 = new Company("s");
      Set<Worker> set0 = company0.getEmployedWorkers();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Company company0 = new Company("s");
      Set<Project> set0 = company0.getProjects();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Company company0 = new Company("k");
      company0.createQualification("k:0:0");
      Set<Qualification> set0 = company0.getQualifications();
      Worker worker0 = new Worker("Worker must be available and not already be in the project you would like to assign to", set0, 12);
      // Undeclared exception!
      try { 
        company0.unassignAll(worker0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Worker is not in company
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Company company0 = new Company("3");
      // Undeclared exception!
      try { 
        company0.unassignAll((Worker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // worker must not be null
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Company company0 = new Company("s");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = company0.createQualification("s");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("s", linkedHashSet0, 1.0);
      company0.createWorker("s", linkedHashSet0, 1.0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = company0.createProject("s", linkedHashSet0, projectSize0);
      // Undeclared exception!
      try { 
        company0.unassign(worker0, project0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // worker must not have been assigned
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Company company0 = new Company("s");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("s");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("s", linkedHashSet0, 1.0);
      // Undeclared exception!
      try { 
        company0.unassign(worker0, (Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // project must not be null
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Company company0 = new Company("p");
      // Undeclared exception!
      try { 
        company0.assign((Worker) null, (Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // worker must not be null
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Company company0 = new Company("s");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = company0.createQualification("', size='");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("s", linkedHashSet0, 1.0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = company0.createProject("s", linkedHashSet0, projectSize0);
      // Undeclared exception!
      try { 
        company0.unassign(worker0, project0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // project and worker must be in the Company you would like to unassign from
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Company company0 = new Company("s");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = company0.createQualification("', sze='");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("s", linkedHashSet0, 1.0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("', sze='", linkedHashSet0, projectSize0);
      // Undeclared exception!
      try { 
        company0.unassign(worker0, project0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // project and worker must be in the Company you would like to unassign from
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Company company0 = new Company("s");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = company0.createQualification("', size='");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = company0.createProject("s", linkedHashSet0, projectSize0);
      Worker worker0 = company0.createWorker("s", linkedHashSet0, 0.7853336387873716);
      company0.assign(worker0, project0);
      // Undeclared exception!
      try { 
        company0.assign(worker0, project0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Worker must be available and not already be in the project you would like to assign to
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Company company0 = new Company("s");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = company0.createQualification("', size='");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("s", linkedHashSet0, 1.0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("', size='", linkedHashSet0, projectSize0);
      // Undeclared exception!
      try { 
        company0.assign(worker0, project0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // project and Worker must be in the Company you would like to assign to
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Company company0 = new Company(":\"{N6KL1r");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = company0.createQualification("qm_\"@Nq8OIR$H|).");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = company0.createProject("$z6E;hbNfks.6Odayc?", linkedHashSet0, projectSize0);
      ProjectStatus projectStatus0 = ProjectStatus.ACTIVE;
      project0.setStatus(projectStatus0);
      company0.finish(project0);
      // Undeclared exception!
      try { 
        company0.finish(project0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Company company0 = new Company(":\"{N6KL1r");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = company0.createQualification("qm_\"@Nq8OIR$H|).");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = company0.createProject("$z6E;hbNfks.6Odayc?", linkedHashSet0, projectSize0);
      // Undeclared exception!
      try { 
        company0.finish(project0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Company company0 = new Company("s");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = company0.createQualification("s");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("s", linkedHashSet0, 1.0);
      company0.createWorker("s", linkedHashSet0, 1.0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = company0.createProject("s", linkedHashSet0, projectSize0);
      company0.assign(worker0, project0);
      company0.unassignAll(worker0);
      // Undeclared exception!
      try { 
        company0.finish(project0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Company company0 = new Company("s");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = company0.createQualification("s");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = company0.createProject("s", linkedHashSet0, projectSize0);
      // Undeclared exception!
      try { 
        company0.start(project0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Company company0 = new Company("s");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = company0.createQualification("', size='");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("', size='", linkedHashSet0, projectSize0);
      ProjectStatus projectStatus0 = ProjectStatus.FINISHED;
      project0.setStatus(projectStatus0);
      // Undeclared exception!
      try { 
        company0.start(project0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Company company0 = new Company("s");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = company0.createQualification("s");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("s", linkedHashSet0, projectSize0);
      // Undeclared exception!
      try { 
        company0.start(project0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Company company0 = new Company("s");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = company0.createQualification("', size='");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("', size='", linkedHashSet0, projectSize0);
      ProjectStatus projectStatus0 = ProjectStatus.ACTIVE;
      project0.setStatus(projectStatus0);
      // Undeclared exception!
      try { 
        company0.start(project0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Company company0 = new Company("s");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("s");
      linkedHashSet0.add(qualification0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = company0.createProject("s", linkedHashSet0, projectSize0);
      assertNull(project0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Company company0 = new Company("SUSPENDED");
      Set<Qualification> set0 = company0.getQualifications();
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = company0.createProject("SUSPENDED", set0, projectSize0);
      assertNull(project0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Company company0 = new Company("p");
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = company0.createProject("p", (Set<Qualification>) null, projectSize0);
      assertNull(project0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Company company0 = new Company("Sb~.f");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = company0.createProject("", linkedHashSet0, projectSize0);
      assertNull(project0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Company company0 = new Company("Worker is not in company");
      Set<Qualification> set0 = company0.getQualifications();
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = company0.createProject((String) null, set0, projectSize0);
      assertNull(project0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Company company0 = new Company("Worker is not in company");
      company0.createQualification("Worker is not in company");
      Qualification qualification0 = company0.createQualification("Worker is not in company");
      assertNull(qualification0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Company company0 = new Company("k");
      company0.createQualification("k:0:0");
      company0.createQualification("apQ)\"wpX S~Q");
      Set<Qualification> set0 = company0.getQualifications();
      Worker worker0 = company0.createWorker(">^u7:", set0, 0.0);
      assertEquals(">^u7:", worker0.getName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Company company0 = new Company("s");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("s");
      linkedHashSet0.add(qualification0);
      Worker worker0 = company0.createWorker("s", linkedHashSet0, 1.0);
      assertNull(worker0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Company company0 = new Company("Worker must be available and not already be in the project you would like to assign to");
      boolean boolean0 = company0.equals(company0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Company company0 = new Company("SUSPENDED");
      boolean boolean0 = company0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Company company0 = new Company("Worker is not in company");
      boolean boolean0 = company0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Company company0 = null;
      try {
        company0 = new Company("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name must not be null or empty
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Company company0 = null;
      try {
        company0 = new Company((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name must not be null or empty
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Company company0 = new Company("s");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = company0.createQualification("s");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("s", linkedHashSet0, 1.0);
      company0.createWorker("s", linkedHashSet0, 1.0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = company0.createProject("s", linkedHashSet0, projectSize0);
      company0.assign(worker0, project0);
      company0.start(project0);
      assertEquals("s", company0.getName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Company company0 = new Company("k");
      Set<Worker> set0 = company0.getAvailableWorkers();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Company company0 = new Company("k");
      Set<Worker> set0 = company0.getUnavailableWorkers();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Company company0 = new Company("s");
      Set<Worker> set0 = company0.getAssignedWorkers();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Company company0 = new Company("k");
      company0.hashCode();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Company company0 = new Company("s");
      Set<Worker> set0 = company0.getUnassignedWorkers();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Company company0 = new Company("s");
      String string0 = company0.toString();
      assertEquals("s:0:0", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Company company0 = new Company("s");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = company0.createQualification("s");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("s", linkedHashSet0, 1.0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = company0.createProject("s", linkedHashSet0, projectSize0);
      // Undeclared exception!
      try { 
        company0.assign(worker0, project0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // project and Worker must be in the Company you would like to assign to
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Company company0 = new Company(":\"{N6KL1r");
      String string0 = company0.getName();
      assertEquals(":\"{N6KL1r", string0);
  }
}
